{"version":3,"sources":["components/GhostButton/index.jsx","components/TimerSetting/index.jsx","App.js","serviceWorker.js","index.js","assets/images/none.png","assets/images/beach.png","assets/images/classroom.png","assets/images/rainy-night.png","assets/images/tick.png","assets/sound/rainy-night.m4a","assets/sound/ticking.mp3","assets/sound/classroom.mp3","assets/sound/beach.mp3"],"names":["GhostButton","react_default","a","createElement","onClick","this","props","className","children","Component","TimerSetting","state","whiteNoise","type","img","none","isActive","src","beach","s_beach","rainyNight","s_rainyNight","classroom","s_classroom","tick","s_ticking","handleChooseNoise","index","_this","map","n","setState","switchNoise","audio","Audio","pauseNoise","playNoise","play","pause","isPlay","_this2","drawer","title","placement","width","visible","onClose","key","alt","TOMATO_TIME","App","restTime","isStarted","isPaused","isVisibleSetting","startTimer","Timer","clearInterval","setInterval","finishTimer","restartTimer","pauseTimer","continueTimer","getRestTime","_tmpDate","Date","getMinutes","toString","padStart","getSeconds","handleCloseSetting","handleOpenSetting","_this$state","src_components_GhostButton","ghost","icon","src_components_TimerSetting","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.69d2f60f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./index.scss\";\n\nclass GhostButton extends Component {\n  render() {\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={this.props.className + \" ghost-btn\"}\n      >\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\nexport default GhostButton;\n","import React, { Component } from \"react\";\nimport { Drawer } from \"antd\";\n\n// images\nimport none from \"../../assets/images/none.png\";\nimport beach from \"../../assets/images/beach.png\";\nimport classroom from \"../../assets/images/classroom.png\";\nimport rainyNight from \"../../assets/images/rainy-night.png\";\nimport tick from \"../../assets/images/tick.png\";\n\n// sounds\nimport s_rainyNight from '../../assets/sound/rainy-night.m4a';\nimport s_ticking from '../../assets/sound/ticking.mp3';\nimport s_classroom from '../../assets/sound/classroom.mp3';\nimport s_beach from '../../assets/sound/beach.mp3';\n\nimport \"antd/lib/drawer/style/css\";\nimport \"./index.scss\";\n\n\nclass TimerSetting extends Component {\n  state = {\n    whiteNoise: [\n      { type: \"无\", img: none, isActive: true, src: '' },\n      { type: \"海滩\", img: beach, src: s_beach },\n      { type: \"雨夜\", img: rainyNight, src: s_rainyNight },\n      { type: \"教室\", img: classroom, src: s_classroom },\n      { type: \"滴答\", img: tick, src: s_ticking }\n    ]\n  };\n\n  componentDidMount () {\n    this.audio = new Audio();\n  }\n\n  componentDidUpdate () {\n    this.props.isPlay ? this.playNoise() : this.pauseNoise();\n  }\n\n  /**\n   * 选择一种白噪声\n   */\n  handleChooseNoise = (index) => {\n    let whiteNoise = this.state.whiteNoise.map(n => {\n      n.isActive = false;\n      return n;\n    });\n    whiteNoise[index].isActive = true;\n    this.setState({\n      whiteNoise\n    });\n    this.switchNoise(whiteNoise[index].src);\n  };\n\n  /**\n   * 切换白噪声\n   */\n  switchNoise = src => {\n    if (!this.audio) {\n      this.audio = new Audio();\n    }\n    this.pauseNoise();\n    this.audio.src = src;\n    this.playNoise();\n  }\n\n  /**\n   * 播放白噪声\n   */\n  playNoise = () => {\n    this.audio && this.audio.play();\n  }\n\n  /**\n   * 暂停白噪声\n   */\n  pauseNoise = () => {\n    this.audio && this.audio.pause();\n  }\n\n  render() {\n    let { whiteNoise } = this.state;\n    return (\n      <Drawer\n        title=\"设置番茄钟\"\n        placement=\"right\"\n        width={330}\n        className=\"timer-setting\"\n        visible={this.props.visible}\n        onClose={this.props.onClose}\n      >\n        <h5 className=\"setting-title\">白噪声</h5>\n        <ul className=\"select-list\">\n          {whiteNoise.map((n, index) => (\n            <li\n              key={index}\n              className={n.isActive ? \"select-item active\" : \"select-item\"}\n              onClick={() => this.handleChooseNoise(index)}\n            >\n              <img alt={n.type} src={n.img} />\n              {n.type}\n            </li>\n          ))}\n        </ul>\n      </Drawer>\n    );\n  }\n}\n\nexport default TimerSetting;\n","import React, { Component } from \"react\";\nimport GhostButton from \"./components/GhostButton\";\nimport { Icon } from \"antd\";\nimport TimerSetting from \"./components/TimerSetting\";\nimport \"./App.scss\";\n\nconst TOMATO_TIME = 1500000;\n\nclass App extends Component {\n  state = {\n    restTime: TOMATO_TIME,\n    isStarted: false,\n    isPaused: false,\n    isVisibleSetting: false\n  };\n\n  componentDidMount() {\n    // this.startTimer();\n    // this.restartTimer();\n  }\n\n  // 清除setInterval\n  componentWillUnmount () {\n    if (this.Timer) {\n      clearInterval(this.Timer);\n    }\n  }\n\n  startTimer = () => {\n    if (this.Timer) {\n      clearInterval(this.Timer);\n    }\n    this.setState({\n      isStarted: true\n    });\n    this.Timer = setInterval(() => {\n      let restTime = this.state.restTime - 1000;\n      if (restTime <= 0) {\n        this.finishTimer();\n        clearInterval(this.Timer);\n      } else {\n        this.setState({\n          restTime\n        });\n      }\n    }, 1000);\n  };\n\n  /**\n   * 开始一个新的番茄钟\n   */\n  restartTimer = () => {\n    this.setState({\n      restTime: TOMATO_TIME,\n      isStarted: true,\n      isPaused: false\n    });\n    this.startTimer();\n  };\n\n  /**\n   * 暂停当前番茄钟\n   */\n  pauseTimer = () => {\n    this.Timer && clearInterval(this.Timer);\n    this.setState({\n      isPaused: true\n    });\n  };\n\n  /**\n   * 结束一个番茄钟\n   */\n  finishTimer = () => {\n    this.setState({\n      restTime: TOMATO_TIME,\n      isStarted: false,\n      isPaused: false\n    });\n  };\n\n  /**\n   * 继续番茄钟\n   */\n  continueTimer = () => {\n    this.setState({\n      isPaused: false\n    });\n    this.startTimer();\n  };\n\n  /**\n   * 获取当前番茄钟的剩余时间\n   * @param {Number} restTime 代表剩余时间的毫秒数\n   */\n  getRestTime = restTime => {\n    let _tmpDate = new Date(restTime);\n    return (\n      _tmpDate\n        .getMinutes()\n        .toString()\n        .padStart(2, \"0\") +\n      \":\" +\n      _tmpDate\n        .getSeconds()\n        .toString()\n        .padStart(2, \"0\")\n    );\n  };\n\n  /**\n   * 关闭设置面板\n   */\n  handleCloseSetting = () => {\n    this.setState({\n      isVisibleSetting: false\n    });\n  };\n\n  /**\n   * 打开设置面板\n   */\n  handleOpenSetting = () => {\n    this.setState({\n      isVisibleSetting: true\n    });\n  };\n\n  render() {\n    let { restTime, isStarted, isPaused, isVisibleSetting } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-Timer\">\n          <p className=\"counter\">{this.getRestTime(restTime)}</p>\n          <div className=\"timer-control\">\n            {isStarted ? (\n              isPaused ? (\n                <div>\n                  <GhostButton className=\"start\" onClick={this.continueTimer}>\n                    继续专注\n                  </GhostButton>\n                  <GhostButton className=\"restart\" onClick={this.finishTimer}>\n                    结束\n                  </GhostButton>\n                </div>\n              ) : (\n                <GhostButton onClick={this.pauseTimer}>暂停</GhostButton>\n              )\n            ) : (\n              <GhostButton onClick={this.startTimer} ghost>\n                开始专注\n              </GhostButton>\n            )}\n          </div>\n        </div>\n        <Icon\n          onClick={this.handleOpenSetting}\n          className=\"icon-setting\"\n          type=\"setting\"\n        />\n        <Icon className=\"icon-statistics\" type=\"ellipsis\" />\n        <TimerSetting\n          visible={isVisibleSetting}\n          isPlay={!isPaused && isStarted}\n          onClose={this.handleCloseSetting}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/none.ce5ace29.png\";","module.exports = __webpack_public_path__ + \"static/media/beach.88aabe60.png\";","module.exports = __webpack_public_path__ + \"static/media/classroom.673076ff.png\";","module.exports = __webpack_public_path__ + \"static/media/rainy-night.3197d351.png\";","module.exports = __webpack_public_path__ + \"static/media/tick.dc04677a.png\";","module.exports = __webpack_public_path__ + \"static/media/rainy-night.b1fea87e.m4a\";","module.exports = __webpack_public_path__ + \"static/media/ticking.7e0cf4b9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/classroom.7d682023.mp3\";","module.exports = __webpack_public_path__ + \"static/media/beach.b438a38a.mp3\";"],"sourceRoot":""}